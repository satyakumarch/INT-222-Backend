{"version":3,"sources":["../src/EventHandle.js"],"names":["EventHandle","emitter","event","listener","emitter_","event_","listener_","removeListener","isDisposed"],"mappings":"AAAA;;;;;;;;AAEA;;;;;;;;AAEA;;;;;;;;IAQMA,W;;;AACL;;;;;;AAMA,sBAAYC,OAAZ,EAAqBC,KAArB,EAA4BC,QAA5B,EAAsC;AAAA;;AAGrC;;;;;AAHqC;;AAQrC,QAAKC,QAAL,GAAgBH,OAAhB;;AAEA;;;;;AAKA,QAAKI,MAAL,GAAcH,KAAd;;AAEA;;;;;AAKA,QAAKI,SAAL,GAAiBH,QAAjB;AAtBqC;AAuBrC;;AAED;;;;;;;;oCAIkB;AACjB,QAAKI,cAAL;AACA,QAAKH,QAAL,GAAgB,IAAhB;AACA,QAAKE,SAAL,GAAiB,IAAjB;AACA;;AAED;;;;;;mCAGiB;AAChB,OAAI,CAAC,KAAKF,QAAL,CAAcI,UAAd,EAAL,EAAiC;AAChC,SAAKJ,QAAL,CAAcG,cAAd,CAA6B,KAAKF,MAAlC,EAA0C,KAAKC,SAA/C;AACA;AACD;;;;;;kBAGaN,W","file":"EventHandle.js","sourcesContent":["'use strict';\n\nimport {Disposable} from 'metal';\n\n/**\n * EventHandle utility. Holds information about an event subscription, and\n * allows removing them easily.\n * EventHandle is a Disposable, but it's important to note that the\n * EventEmitter that created it is not the one responsible for disposing it.\n * That responsibility is for the code that holds a reference to it.\n * @extends {Disposable}\n */\nclass EventHandle extends Disposable {\n\t/**\n\t * EventHandle constructor\n\t * @param {!EventEmitter} emitter Emitter the event was subscribed to.\n\t * @param {string} event The name of the event that was subscribed to.\n\t * @param {!Function} listener The listener subscribed to the event.\n\t */\n\tconstructor(emitter, event, listener) {\n\t\tsuper();\n\n\t\t/**\n\t\t * The EventEmitter instance that the event was subscribed to.\n\t\t * @type {EventEmitter}\n\t\t * @protected\n\t\t */\n\t\tthis.emitter_ = emitter;\n\n\t\t/**\n\t\t * The name of the event that was subscribed to.\n\t\t * @type {string}\n\t\t * @protected\n\t\t */\n\t\tthis.event_ = event;\n\n\t\t/**\n\t\t * The listener subscribed to the event.\n\t\t * @type {Function}\n\t\t * @protected\n\t\t */\n\t\tthis.listener_ = listener;\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.removeListener();\n\t\tthis.emitter_ = null;\n\t\tthis.listener_ = null;\n\t}\n\n\t/**\n\t * Removes the listener subscription from the emitter.\n\t */\n\tremoveListener() {\n\t\tif (!this.emitter_.isDisposed()) {\n\t\t\tthis.emitter_.removeListener(this.event_, this.listener_);\n\t\t}\n\t}\n}\n\nexport default EventHandle;\n"]}