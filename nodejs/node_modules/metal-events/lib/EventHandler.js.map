{"version":3,"sources":["../src/EventHandler.js"],"names":["EventHandler","eventHandles_","args","i","arguments","length","push","removeListener"],"mappings":"AAAA;;;;;;;;AAEA;;;;;;;;AAEA;;;;;IAKMA,Y;;;AACL;;;AAGA,yBAAc;AAAA;;AAGb;;;;;;AAHa;;AASb,QAAKC,aAAL,GAAqB,EAArB;AATa;AAUb;;AAED;;;;;;;;;wBAKa;AAAA,qCAANC,IAAM;AAANA,QAAM;AAAA;;AACZ,QAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIC,UAAUC,MAA9B,EAAsCF,GAAtC,EAA2C;AAC1C,SAAKF,aAAL,CAAmBK,IAAnB,CAAwBJ,KAAKC,CAAL,CAAxB;AACA;AACD;;AAED;;;;;;;oCAIkB;AACjB,QAAKF,aAAL,GAAqB,IAArB;AACA;;AAED;;;;;;uCAGqB;AACpB,QAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAI,KAAKF,aAAL,CAAmBI,MAAvC,EAA+CF,GAA/C,EAAoD;AACnD,SAAKF,aAAL,CAAmBE,CAAnB,EAAsBI,cAAtB;AACA;;AAED,QAAKN,aAAL,GAAqB,EAArB;AACA;;;;;;kBAGaD,Y","file":"EventHandler.js","sourcesContent":["'use strict';\n\nimport {Disposable} from 'metal';\n\n/**\n * EventHandler utility. It's useful for easily removing a group of\n * listeners from different EventEmitter instances.\n * @extends {Disposable}\n */\nclass EventHandler extends Disposable {\n\t/**\n\t * EventHandler constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * An array that holds the added event handles, so the listeners can be\n\t\t * removed later.\n\t\t * @type {Array.<EventHandle>}\n\t\t * @protected\n\t\t */\n\t\tthis.eventHandles_ = [];\n\t}\n\n\t/**\n\t * Adds event handles to be removed later through the `removeAllListeners`\n\t * method.\n\t * @param {...(!EventHandle)} var_args\n\t */\n\tadd(...args) {\n\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\tthis.eventHandles_.push(args[i]);\n\t\t}\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.eventHandles_ = null;\n\t}\n\n\t/**\n\t * Removes all listeners that have been added through the `add` method.\n\t */\n\tremoveAllListeners() {\n\t\tfor (let i = 0; i < this.eventHandles_.length; i++) {\n\t\t\tthis.eventHandles_[i].removeListener();\n\t\t}\n\n\t\tthis.eventHandles_ = [];\n\t}\n}\n\nexport default EventHandler;\n"]}