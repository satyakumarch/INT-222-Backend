{"version":3,"sources":["../src/DomEventHandle.js"],"names":["DomEventHandle","emitter","event","listener","capture","capture_","emitter_","removeEventListener","event_","listener_"],"mappings":"AAAA;;;;;;;;AAEA;;;;;;;;AAEA;;;;;IAKMA,c;;;AACL;;;;;;;;;AASA,yBAAYC,OAAZ,EAAqBC,KAArB,EAA4BC,QAA5B,EAAsCC,OAAtC,EAA+C;AAAA;;AAAA,8HACxCH,OADwC,EAC/BC,KAD+B,EACxBC,QADwB;;AAE9C,QAAKE,QAAL,GAAgBD,OAAhB;AAF8C;AAG9C;;AAED;;;;;;;mCAGiB;AAChB,QAAKE,QAAL,CAAcC,mBAAd,CACC,KAAKC,MADN,EAEC,KAAKC,SAFN,EAGC,KAAKJ,QAHN;AAKA;;;;;;kBAGaL,c","file":"DomEventHandle.js","sourcesContent":["'use strict';\n\nimport {EventHandle} from 'metal-events';\n\n/**\n * This is a special EventHandle, that is responsible for dom events, instead\n * of EventEmitter events.\n * @extends {EventHandle}\n */\nclass DomEventHandle extends EventHandle {\n\t/**\n\t * The constructor for `DomEventHandle`.\n\t * @param {!EventEmitter} emitter Emitter the event was subscribed to.\n\t * @param {string} event The name of the event that was subscribed to.\n\t * @param {!Function} listener The listener subscribed to the event.\n\t * @param {boolean} capture Flag indicating if listener should be triggered\n\t *   during capture phase, instead of during the bubbling phase. Defaults to false.\n\t * @constructor\n\t */\n\tconstructor(emitter, event, listener, capture) {\n\t\tsuper(emitter, event, listener);\n\t\tthis.capture_ = capture;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tremoveListener() {\n\t\tthis.emitter_.removeEventListener(\n\t\t\tthis.event_,\n\t\t\tthis.listener_,\n\t\t\tthis.capture_\n\t\t);\n\t}\n}\n\nexport default DomEventHandle;\n"]}