{"version":3,"sources":["../src/DomEventEmitterProxy.js"],"names":["DomEventEmitterProxy","event","listener","originEmitter_","addEventListener","isDelegateEvent_","index","indexOf","eventName","substring","selector","substr","isSupportedDomEvent_"],"mappings":"AAAA;;;;;;;;;;AAEA;;AACA;;;;;;;;AAEA;;;;;IAKMA,oB;;;;;;;;;;;;AACL;;;;;;;;+BAQaC,K,EAAOC,Q,EAAU;AAC7B,OAAI,KAAKC,cAAL,CAAoBC,gBAAxB,EAA0C;AACzC,QAAI,KAAKC,gBAAL,CAAsBJ,KAAtB,CAAJ,EAAkC;AACjC,SAAMK,QAAQL,MAAMM,OAAN,CAAc,GAAd,EAAmB,CAAnB,CAAd;AACA,SAAMC,YAAYP,MAAMQ,SAAN,CAAgB,CAAhB,EAAmBH,KAAnB,CAAlB;AACA,SAAMI,WAAWT,MAAMQ,SAAN,CAAgBH,QAAQ,CAAxB,CAAjB;AACA,YAAO,mBACN,KAAKH,cADC,EAENK,SAFM,EAGNE,QAHM,EAINR,QAJM,CAAP,CAJiC,CAS9B;AACH,KAVD,MAUO;AACN,YAAO,aAAG,KAAKC,cAAR,EAAwBF,KAAxB,EAA+BC,QAA/B,CAAP;AACA;AACD,IAdD,MAcO;AACN,oJAA0BD,KAA1B,EAAiCC,QAAjC;AACA;AACD;;AAED;;;;;;;;;mCAMiBD,K,EAAO;AACvB,UAAOA,MAAMU,MAAN,CAAa,CAAb,EAAgB,CAAhB,MAAuB,WAA9B;AACA;;AAED;;;;;;;;;uCAMqBV,K,EAAO;AAC3B,OAAI,CAAC,KAAKE,cAAN,IAAwB,CAAC,KAAKA,cAAL,CAAoBC,gBAAjD,EAAmE;AAClE,WAAO,IAAP;AACA;AACD,UACE,KAAKC,gBAAL,CAAsBJ,KAAtB,KAAgCA,MAAMM,OAAN,CAAc,GAAd,EAAmB,CAAnB,MAA0B,CAAC,CAA5D,IACA,wBAAc,KAAKJ,cAAnB,EAAmCF,KAAnC,CAFD;AAIA;;AAED;;;;;;;;;;oCAOkBA,K,EAAO;AACxB,UACC,8IAAwBA,KAAxB,KAAkC,KAAKW,oBAAL,CAA0BX,KAA1B,CADnC,CADwB,CAGrB;AACH;;;;;;kBAGaD,oB","file":"DomEventEmitterProxy.js","sourcesContent":["'use strict';\n\nimport {delegate, on, supportsEvent} from './dom';\nimport {EventEmitterProxy} from 'metal-events';\n\n/**\n * DomEventEmitterProxy utility. It extends `EventEmitterProxy` to also accept\n * dom elements as origin emitters.\n * @extends {EventEmitterProxy}\n */\nclass DomEventEmitterProxy extends EventEmitterProxy {\n\t/**\n\t * Adds the given listener for the given event.\n\t * @param {string} event\n\t * @param {!function()} listener\n\t * @return {!EventHandle} The listened event's handle.\n\t * @protected\n\t * @override\n\t */\n\taddListener_(event, listener) {\n\t\tif (this.originEmitter_.addEventListener) {\n\t\t\tif (this.isDelegateEvent_(event)) {\n\t\t\t\tconst index = event.indexOf(':', 9);\n\t\t\t\tconst eventName = event.substring(9, index);\n\t\t\t\tconst selector = event.substring(index + 1);\n\t\t\t\treturn delegate(\n\t\t\t\t\tthis.originEmitter_,\n\t\t\t\t\teventName,\n\t\t\t\t\tselector,\n\t\t\t\t\tlistener\n\t\t\t\t); // eslint-disable-line\n\t\t\t} else {\n\t\t\t\treturn on(this.originEmitter_, event, listener);\n\t\t\t}\n\t\t} else {\n\t\t\treturn super.addListener_(event, listener);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given event is of the delegate type.\n\t * @param {string} event\n\t * @return {boolean}\n\t * @protected\n\t */\n\tisDelegateEvent_(event) {\n\t\treturn event.substr(0, 9) === 'delegate:';\n\t}\n\n\t/**\n\t * Checks if the given event is supported by the origin element.\n\t * @param {string} event\n\t * @protected\n\t * @return {boolean}\n\t */\n\tisSupportedDomEvent_(event) {\n\t\tif (!this.originEmitter_ || !this.originEmitter_.addEventListener) {\n\t\t\treturn true;\n\t\t}\n\t\treturn (\n\t\t\t(this.isDelegateEvent_(event) && event.indexOf(':', 9) !== -1) ||\n\t\t\tsupportsEvent(this.originEmitter_, event)\n\t\t);\n\t}\n\n\t/**\n\t * Checks if the given event should be proxied.\n\t * @param {string} event\n\t * @return {boolean}\n\t * @protected\n\t * @override\n\t */\n\tshouldProxyEvent_(event) {\n\t\treturn (\n\t\t\tsuper.shouldProxyEvent_(event) && this.isSupportedDomEvent_(event)\n\t\t); // eslint-disable-line\n\t}\n}\n\nexport default DomEventEmitterProxy;\n"]}