{"version":3,"sources":["../src/coreNamed.js"],"names":["abstractMethod","disableCompatibilityMode","enableCompatibilityMode","getCompatibilityModeData","getFunctionName","getStaticProperty","getUid","identityFunction","isBoolean","isDef","isDefAndNotNull","isDocument","isDocumentFragment","isElement","isFunction","isNull","isNumber","isWindow","isObject","isPromise","isString","isServerSide","nullFunction","compatibilityModeData_","uniqueIdCounter_","UID_PROPERTY","Math","random","Error","undefined","data","window","__METAL_COMPATIBILITY__","getFirstTruthy_","a","b","fn","name","str","toString","substring","indexOf","ctor","propertyName","mergeFn","mergedName","hasOwnProperty","merged","__proto__","isPrototypeOf","Function","object","noInheritance","id","returnValue","val","nodeType","type","then","String","options","checkEnv","serverSide","process","browser","env","NODE_ENV"],"mappings":"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","file":"coreNamed.js","sourcesContent":["'use strict';\n\n/**\n * A collection of core utility functions.\n * @const\n */\n\nlet compatibilityModeData_;\n\n/**\n * Counter for unique id.\n * @type {Number}\n * @private\n */\nlet uniqueIdCounter_ = 1;\n\n/**\n * Unique id property prefix.\n * @type {String}\n * @protected\n */\nexport const UID_PROPERTY = `core_${(Math.random() * 1e9) >>> 0}`;\n\n/**\n * When defining a class Foo with an abstract method bar(), you can do:\n * Foo.prototype.bar = abstractMethod\n *\n * Now if a subclass of Foo fails to override bar(), an error will be thrown\n * when bar() is invoked.\n *\n * @type {!Function}\n * @throws {Error} when invoked to indicate the method should be overridden.\n */\nexport function abstractMethod() {\n\tthrow Error('Unimplemented abstract method');\n}\n\n/**\n * Disables Metal.js's compatibility mode.\n */\nexport function disableCompatibilityMode() {\n\tcompatibilityModeData_ = undefined;\n}\n\n/**\n * Enables Metal.js's compatibility mode with the following features from rc\n * and 1.x versions:\n *     - Using \"key\" to reference component instances. In the current version\n *       this should be done via \"ref\" instead. This allows old code still\n *       using \"key\" to keep working like before. NOTE: this may cause\n *       problems, since \"key\" is meant to be used differently. Only use this\n *       if it's not possible to upgrade the code to use \"ref\" instead.\n * @param {Object=} data Optional object with data to specify more\n *     details, such as:\n *         - renderers {Array} the template renderers that should be in\n *           compatibility mode, either their constructors or strings\n *           representing them (e.g. 'soy' or 'jsx'). By default, all the ones\n *           that extend from IncrementalDomRenderer.\n * @type {Object}\n */\nexport function enableCompatibilityMode(data = {}) {\n\tcompatibilityModeData_ = data;\n}\n\n/**\n * Returns the data used for compatibility mode, or nothing if it hasn't been\n * enabled.\n * @return {Object}\n */\nexport function getCompatibilityModeData() {\n\t// Compatibility mode can be set via the __METAL_COMPATIBILITY__ global var.\n\tif (compatibilityModeData_ === undefined) {\n\t\tif (typeof window !== 'undefined' && window.__METAL_COMPATIBILITY__) {\n\t\t\tenableCompatibilityMode(window.__METAL_COMPATIBILITY__);\n\t\t}\n\t}\n\treturn compatibilityModeData_;\n}\n\n/**\n * Returns the first argument if it's truthy, or the second otherwise.\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @protected\n */\nfunction getFirstTruthy_(a, b) {\n\treturn a || b;\n}\n\n/**\n * Gets the name of the given function. If the current browser doesn't\n * support the `name` property, like IE11, this will calculate it from the function's\n * content string.\n * @param {!function()} fn\n * @return {string}\n */\nexport function getFunctionName(fn) {\n\tif (!fn.name) {\n\t\tconst str = fn.toString();\n\t\tfn.name = str.substring(9, str.indexOf('('));\n\t}\n\treturn fn.name;\n}\n\n/**\n * Gets the value of a static property in the given class. The value will be\n * inherited from ancestors as expected, unless a custom merge function is given,\n * which can change how the super classes' value for that property will be merged\n * together.\n * The final merged value will be stored in another property, so that it won't\n * be recalculated even if this function is called multiple times.\n * @param {!function()} ctor Class constructor.\n * @param {string} propertyName Property name to be merged.\n * @param {function(*, *):*=} mergeFn Function that receives the merged\n *     value of the property so far and the next value to be merged to it.\n *     Should return these two merged together. If not passed the final property\n *     will be the first truthy value among ancestors.\n * @return {Object}\n */\nexport function getStaticProperty(\n\tctor,\n\tpropertyName,\n\tmergeFn = getFirstTruthy_\n) {\n\tconst mergedName = propertyName + '_MERGED';\n\tif (!ctor.hasOwnProperty(mergedName)) {\n\t\t// eslint-disable-next-line\n\t\tlet merged = ctor.hasOwnProperty(propertyName)\n\t\t\t? ctor[propertyName]\n\t\t\t: null;\n\t\tif (ctor.__proto__ && !ctor.__proto__.isPrototypeOf(Function)) {\n\t\t\tmerged = mergeFn(\n\t\t\t\tmerged,\n\t\t\t\tgetStaticProperty(ctor.__proto__, propertyName, mergeFn)\n\t\t\t);\n\t\t}\n\t\tctor[mergedName] = merged;\n\t}\n\treturn ctor[mergedName];\n}\n\n/**\n * Gets an unique id. If `object` argument is passed, the object is\n * mutated with an unique id. Consecutive calls with the same object\n * reference won't mutate the object again, instead the current object uid\n * returns. See {@link UID_PROPERTY}.\n * @param {Object=} object Optional object to be mutated with the uid. If\n *     not specified this method only returns the uid.\n * @param {boolean=} noInheritance Optional flag indicating if this\n *     object's uid property can be inherited from parents or not.\n * @throws {Error} when invoked to indicate the method should be overridden.\n * @return {number}\n */\nexport function getUid(object, noInheritance) {\n\tif (object) {\n\t\tlet id = object[UID_PROPERTY];\n\t\tif (noInheritance && !object.hasOwnProperty(UID_PROPERTY)) {\n\t\t\tid = null;\n\t\t}\n\t\treturn id || (object[UID_PROPERTY] = uniqueIdCounter_++);\n\t}\n\treturn uniqueIdCounter_++;\n}\n\n/**\n * The identity function. Returns its first argument.\n * @param {*=} returnValue The single value that will be returned.\n * @return {?} The first argument.\n */\nexport function identityFunction(returnValue) {\n\treturn returnValue;\n}\n\n/**\n * Returns true if the specified value is a boolean.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is boolean.\n */\nexport function isBoolean(val) {\n\treturn typeof val === 'boolean';\n}\n\n/**\n * Returns true if the specified value is not undefined.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined.\n */\nexport function isDef(val) {\n\treturn val !== undefined;\n}\n\n/**\n * Returns true if value is not undefined or null.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDefAndNotNull(val) {\n\treturn isDef(val) && !isNull(val);\n}\n\n/**\n * Returns true if value is a document.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDocument(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 9;\n}\n\n/**\n * Returns true if value is a document-fragment.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDocumentFragment(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 11;\n}\n\n/**\n * Returns true if value is a dom element.\n * @param {*} val\n * @return {boolean}\n */\nexport function isElement(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 1;\n}\n\n/**\n * Returns true if the specified value is a function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a function.\n */\nexport function isFunction(val) {\n\treturn typeof val === 'function';\n}\n\n/**\n * Returns true if value is null.\n * @param {*} val\n * @return {boolean}\n */\nexport function isNull(val) {\n\treturn val === null;\n}\n\n/**\n * Returns true if the specified value is a number.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a number.\n */\nexport function isNumber(val) {\n\treturn typeof val === 'number';\n}\n\n/**\n * Returns true if value is a window.\n * @param {*} val\n * @return {boolean}\n */\nexport function isWindow(val) {\n\treturn val !== null && val === val.window;\n}\n\n/**\n * Returns true if the specified value is an object. This includes arrays\n * and functions.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an object.\n */\nexport function isObject(val) {\n\tconst type = typeof val;\n\treturn (type === 'object' && val !== null) || type === 'function';\n}\n\n/**\n * Returns true if value is a Promise.\n * @param {*} val\n * @return {boolean}\n */\nexport function isPromise(val) {\n\treturn val && typeof val === 'object' && typeof val.then === 'function';\n}\n\n/**\n * Returns true if value is a string.\n * @param {*} val\n * @return {boolean}\n */\nexport function isString(val) {\n\treturn typeof val === 'string' || val instanceof String;\n}\n\n/**\n * Sets to true if running inside Node.js environment with extra check for\n * `process.browser` to skip Karma runner environment. Karma environment has\n * `process` defined even though it runs on the browser.\n * @param {?Object} options Contains `checkEnv` property which if true, checks\n * the NODE_ENV variable. If NODE_ENV equals 'test', the function returns false.\n * @return {boolean}\n */\nexport function isServerSide(options = {checkEnv: true}) {\n\tlet serverSide = typeof process !== 'undefined' && !process.browser;\n\tif (serverSide && options.checkEnv) {\n\t\tserverSide =\n\t\t\ttypeof process.env !== 'undefined' &&\n\t\t\tprocess.env.NODE_ENV !== 'test';\n\t}\n\treturn serverSide;\n}\n\n/**\n * Null function used for default values of callbacks, etc.\n * @return {void} Nothing.\n */\nexport function nullFunction() {}\n"]}